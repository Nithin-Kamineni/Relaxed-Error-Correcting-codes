import numpy as np

def synthesize_from_distribution(
    n: int,
    seed = None,
    offset: int = 0,
    low: int = -128,
    high: int = 127,
    return_numpy: bool = False,   # set True if you want a NumPy array back
):
    """
    Vectorized sampler with optional offset and post-processing.
    """
    if n < 0:
        raise ValueError("n must be >= 0")
    rng = np.random.default_rng(seed)

    # probs = dist.get("probs", {})
    # counts = dist.get("counts", {})

    probs = {-128: 0.0005592841163310962,
 -109: 6.991051454138702e-05,
 -100: 0.0005592841163310962,
 -89: 0.0005592841163310962,
 -86: 0.0005592841163310962,
 -79: 0.0005592841163310962,
 -78: 0.0005592841163310962,
 -77: 0.0005592841163310962,
 -74: 0.0011185682326621924,
 -73: 0.0005592841163310962,
 -71: 0.0005592841163310962,
 -70: 0.0006291946308724832,
 -68: 0.0005592841163310962,
 -67: 0.0006291946308724832,
 -66: 0.0006291946308724832,
 -65: 0.0005592841163310962,
 -64: 6.991051454138702e-05,
 -63: 0.0006291946308724832,
 -62: 0.0005592841163310962,
 -60: 0.0006291946308724832,
 -58: 0.0005592841163310962,
 -57: 0.0011185682326621924,
 -56: 0.0005592841163310962,
 -55: 0.0005592841163310962,
 -54: 0.0005592841163310962,
 -53: 0.0005592841163310962,
 -51: 0.0006291946308724832,
 -50: 0.0017477628635346756,
 -49: 0.0011185682326621924,
 -48: 0.0011185682326621924,
 -47: 0.0006991051454138703,
 -46: 0.0006291946308724832,
 -45: 0.0011185682326621924,
 -44: 0.0011884787472035794,
 -43: 0.0023769574944071587,
 -42: 0.0020274049217002235,
 -41: 0.0005592841163310962,
 -40: 0.003355704697986577,
 -39: 0.0017477628635346756,
 -38: 0.002936241610738255,
 -37: 0.0018176733780760625,
 -36: 0.004054809843400447,
 -35: 0.003495525727069351,
 -34: 0.0011185682326621924,
 -33: 0.002866331096196868,
 -32: 0.0039149888143176735,
 -31: 0.002866331096196868,
 -30: 0.0039149888143176735,
 -29: 0.0016778523489932886,
 -28: 0.007690156599552573,
 -27: 0.005732662192393736,
 -26: 0.006291946308724832,
 -25: 0.00468400447427293,
 -24: 0.003635346756152125,
 -23: 0.006711409395973154,
 -22: 0.002936241610738255,
 -21: 0.003495525727069351,
 -20: 0.008529082774049217,
 -19: 0.006991051454138702,
 -18: 0.006152125279642058,
 -17: 0.005592841163310962,
 -16: 0.011884787472035795,
 -15: 0.008389261744966443,
 -14: 0.013213087248322148,
 -13: 0.01691834451901566,
 -12: 0.015100671140939598,
 -11: 0.012164429530201342,
 -10: 0.012583892617449664,
 -9: 0.014960850111856824,
 -8: 0.024258948545861296,
 -7: 0.023210290827740492,
 -6: 0.025866890380313198,
 -5: 0.014261744966442953,
 -4: 0.0398489932885906,
 -3: 0.03243847874720358,
 -2: 0.03691275167785235,
 -1: 0.032997762863534674,
 0: 0.04477768456375839,
 1: 0.0409675615212528,
 2: 0.04033836689038031,
 3: 0.04316974272930649,
 4: 0.029327460850111856,
 5: 0.02590184563758389,
 6: 0.0318092841163311,
 7: 0.019679809843400446,
 8: 0.022755872483221477,
 9: 0.017687360178970917,
 10: 0.016988255033557047,
 11: 0.018631152125279642,
 12: 0.0091582774049217,
 13: 0.011884787472035795,
 14: 0.009123322147651007,
 15: 0.010975950782997762,
 16: 0.00576761744966443,
 17: 0.00468400447427293,
 18: 0.005802572706935123,
 19: 0.005697706935123043,
 20: 0.003355704697986577,
 21: 0.006746364653243848,
 22: 0.002866331096196868,
 23: 0.007934843400447427,
 24: 0.0026216442953020135,
 25: 0.00468400447427293,
 26: 0.0028313758389261743,
 27: 0.003076062639821029,
 28: 0.0011185682326621924,
 29: 0.003495525727069351,
 30: 0.00457913870246085,
 31: 0.002446868008948546,
 32: 0.003076062639821029,
 33: 0.003949944071588367,
 34: 0.002866331096196868,
 35: 0.0005592841163310962,
 36: 0.0016079418344519016,
 37: 0.0017477628635346756,
 38: 0.0022371364653243847,
 39: 0.0017827181208053692,
 40: 0.0002796420581655481,
 41: 0.0028313758389261743,
 42: 0.0016778523489932886,
 43: 0.0013982102908277406,
 44: 0.0038450782997762863,
 45: 0.001153523489932886,
 46: 0.0025167785234899327,
 47: 0.001433165548098434,
 48: 0.0016778523489932886,
 49: 0.001433165548098434,
 50: 0.0009787472035794184,
 51: 0.002796420581655481,
 52: 0.0022371364653243847,
 53: 0.003495525727069351,
 54: 0.0019574944071588368,
 55: 0.0016778523489932886,
 57: 0.0005592841163310962,
 59: 0.0013982102908277406,
 60: 0.0011884787472035794,
 61: 0.0008389261744966443,
 62: 0.0013982102908277406,
 63: 0.0009088366890380313,
 65: 6.991051454138702e-05,
 66: 0.0005592841163310962,
 67: 0.0013982102908277406,
 68: 0.0011185682326621924,
 69: 0.0005592841163310962,
 70: 0.0002796420581655481,
 72: 0.0007690156599552573,
 73: 0.0013982102908277406,
 74: 0.0009088366890380313,
 75: 0.0005592841163310962,
 77: 0.0011185682326621924,
 81: 0.0019574944071588368,
 84: 3.495525727069351e-05,
 86: 0.0002796420581655481,
 87: 6.991051454138702e-05,
 88: 0.0005592841163310962,
 89: 6.991051454138702e-05,
 90: 0.0014681208053691276,
 91: 0.0006991051454138703,
 92: 6.991051454138702e-05,
 93: 0.0005592841163310962,
 96: 0.00034955257270693514,
 97: 6.991051454138702e-05,
 99: 0.0002796420581655481,
 100: 0.00034955257270693514,
 103: 0.0002796420581655481,
 105: 0.0005592841163310962,
 107: 3.495525727069351e-05,
 108: 0.0003145973154362416,
 109: 0.0005592841163310962,
 112: 0.0002796420581655481,
 122: 3.495525727069351e-05,
 124: 0.00013982102908277405,
 127: 0.00038450782997762864}
    counts = {-128: 16,
 -109: 2,
 -100: 16,
 -89: 16,
 -86: 16,
 -79: 16,
 -78: 16,
 -77: 16,
 -74: 32,
 -73: 16,
 -71: 16,
 -70: 18,
 -68: 16,
 -67: 18,
 -66: 18,
 -65: 16,
 -64: 2,
 -63: 18,
 -62: 16,
 -60: 18,
 -58: 16,
 -57: 32,
 -56: 16,
 -55: 16,
 -54: 16,
 -53: 16,
 -51: 18,
 -50: 50,
 -49: 32,
 -48: 32,
 -47: 20,
 -46: 18,
 -45: 32,
 -44: 34,
 -43: 68,
 -42: 58,
 -41: 16,
 -40: 96,
 -39: 50,
 -38: 84,
 -37: 52,
 -36: 116,
 -35: 100,
 -34: 32,
 -33: 82,
 -32: 112,
 -31: 82,
 -30: 112,
 -29: 48,
 -28: 220,
 -27: 164,
 -26: 180,
 -25: 134,
 -24: 104,
 -23: 192,
 -22: 84,
 -21: 100,
 -20: 244,
 -19: 200,
 -18: 176,
 -17: 160,
 -16: 340,
 -15: 240,
 -14: 378,
 -13: 484,
 -12: 432,
 -11: 348,
 -10: 360,
 -9: 428,
 -8: 694,
 -7: 664,
 -6: 740,
 -5: 408,
 -4: 1140,
 -3: 928,
 -2: 1056,
 -1: 944,
 0: 1281,
 1: 1172,
 2: 1154,
 3: 1235,
 4: 839,
 5: 741,
 6: 910,
 7: 563,
 8: 651,
 9: 506,
 10: 486,
 11: 533,
 12: 262,
 13: 340,
 14: 261,
 15: 314,
 16: 165,
 17: 134,
 18: 166,
 19: 163,
 20: 96,
 21: 193,
 22: 82,
 23: 227,
 24: 75,
 25: 134,
 26: 81,
 27: 88,
 28: 32,
 29: 100,
 30: 131,
 31: 70,
 32: 88,
 33: 113,
 34: 82,
 35: 16,
 36: 46,
 37: 50,
 38: 64,
 39: 51,
 40: 8,
 41: 81,
 42: 48,
 43: 40,
 44: 110,
 45: 33,
 46: 72,
 47: 41,
 48: 48,
 49: 41,
 50: 28,
 51: 80,
 52: 64,
 53: 100,
 54: 56,
 55: 48,
 57: 16,
 59: 40,
 60: 34,
 61: 24,
 62: 40,
 63: 26,
 65: 2,
 66: 16,
 67: 40,
 68: 32,
 69: 16,
 70: 8,
 72: 22,
 73: 40,
 74: 26,
 75: 16,
 77: 32,
 81: 56,
 84: 1,
 86: 8,
 87: 2,
 88: 16,
 89: 2,
 90: 42,
 91: 20,
 92: 2,
 93: 16,
 96: 10,
 97: 2,
 99: 8,
 100: 10,
 103: 8,
 105: 16,
 107: 1,
 108: 9,
 109: 16,
 112: 8,
 122: 1,
 124: 4,
 127: 11}

    if probs:
        values = np.fromiter(probs.keys(), dtype=np.int64)
        p = np.fromiter(probs.values(), dtype=float)
        p = p / p.sum()
        samples = rng.choice(values, size=n, replace=True, p=p)
    elif counts:
        values = np.fromiter(counts.keys(), dtype=np.int64)
        samples = rng.choice(values, size=n, replace=True)
    else:
        return np.array([], dtype=int) if return_numpy else []

    samples = np.clip(samples, low, high)
    
    samples = samples + offset

    return samples.astype(int) if return_numpy else samples.astype(int).tolist()